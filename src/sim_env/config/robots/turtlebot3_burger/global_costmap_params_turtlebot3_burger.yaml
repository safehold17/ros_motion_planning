# map
global_frame: map
# 定义了全局坐标系为map，表示全局代价地图的参考坐标系是固定的地图坐标系（通常是静态的SLAM地图）

map_type: costmap
# 地图类型为代价地图，用于路径规划

origin_z: 0.0
# z轴原点为0，代表地图的高度为0，用于二维导航
z_resolution: 1
z_voxels: 2
publish_voxel_map: false
#不使用体素地图，表示二维地图

transform_tolerance: 0.5
# 与局部地图中的一样
meter_scoring: true
# 全局地图单位为米

# robot base
robot_base_frame: base_footprint
footprint: [[-0.21, -0.165], [-0.21, 0.165], [0.21, 0.165], [0.21, -0.165]]
# 机器人的物理边界
footprint_padding: 0.1
# 机器人边界的填充，增加了0.1米的安全距离

update_frequency: 2.0
publish_frequency: 1.0
# 全局地图的更新频率和发布频率

transform_tolerance: 0.5
cost_scaling_factor:  2.0
# 成本缩放因子，控制障碍物的成本衰减速度
inflation_radius: 0.8
# 膨胀因子比局部规划器的值要小，更适合精细的路径规划？？？？

### Sensor management parameters ###
obstacle_layer:
  observation_sources: scan  # 使用名为scan的传感器数据源
  scan: { 
    topic:                    scan, 
    sensor_frame:             base_footprint, 
    observation_persistence:  0.0,
    # 观测数据不持久保存，即每次更新都使用最新数据

    expected_update_rate:     0.8,
    data_type:                LaserScan, 
    clearing:                 true,  # 障碍物清除
    marking:                  true,  # 障碍物标记
    max_obstacle_height:      0.8,
    min_obstacle_height:      0.0,
    obstacle_range:           2.5,
    raytrace_range:           3.0,  # 最远检测范围
    inf_is_valid:             true
  }  

inflation_layer:
  enabled:              true
  cost_scaling_factor:  2.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.8  # max. distance from an obstacle at which costs are incurred for planning paths.

static_map:
  enabled:              true
  clear_time:           20  # 静态地图20s后清除，如何获得新的静态地图？？？？
  publish_static_map:   true


# 代价地图：

  # 栅格化 (Grid-based representation): 环境被分割成一个个小的栅格单元，每个栅格代表一个小的区域。
  # 代价 (Cost): 每个栅格单元被赋予一个数值，表示通过该单元格的代价。代价越高，表示越难通过或越危险。
  # 层 (Layers): 代价地图可以由多个层叠加而成，每一层负责考虑不同的因素，最终合并成一个综合的代价地图。
  # 代价地图通常由多个层叠加而成，每个层负责表示不同的信息，例如：

  #   静态层 (Static Layer): 表示环境中静态的、不变的障碍物，例如墙壁、建筑物、固定的家具等。 数据通常来源于地图文件 (例如：SLAM 生成的地图，或者预先定义的地图)。
  #   障碍物层 (Obstacle Layer): 表示环境中动态的障碍物，例如行人、移动的物体、其他机器人等。数据通常来源于传感器信息 (例如：激光雷达、深度相机、超声波传感器)。
  #   膨胀层 (Inflation Layer): 围绕障碍物扩展一个安全距离，以防止机器人过于靠近障碍物，避免碰撞。 代价值通常随着距离障碍物的距离增加而降低。
  #   代价比例层/权重层 (Cost Scaling Layer/Weight Layer): 用于调整不同层的代价权重，例如，可以赋予障碍物层更高的权重，使得机器人更倾向于避开障碍物。
  #   传感器层 (Sensor Layer): 直接将传感器数据转换为代价信息，例如，将激光雷达的距离数据转换为代价值。
  #   导航层 (Navigation Layer): 包含路径规划算法的结果，例如，路径的代价、可达性等信息。
  #   自定义层 (Custom Layer): 用于表示其他特殊信息，例如：禁行区域、危险区域、高价值区域等。